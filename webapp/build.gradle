group 'com.appropel.schuss'
version '1.0-SNAPSHOT'

apply plugin: 'java'
apply plugin: 'org.liquibase.gradle'
apply plugin: 'org.springframework.boot'    // http://docs.spring.io/spring-boot/docs/current/reference/html/build-tool-plugins-gradle-plugin.html
apply plugin: 'checkstyle'
apply plugin: 'pmd'
apply plugin: 'findbugs'
apply plugin: 'pl.squirrel.classycle'

sourceCompatibility = "1.8"
targetCompatibility = "1.8"

bootJar {
    baseName = 'schuss-spring-boot'
    version =  '1.0.0'
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    // Depend on the model
    compile project(path: ':model')

    // DataNucleus RDBMS support (JDO persistence API)
    compile 'org.datanucleus:javax.jdo:3.2.0-m8'
    compile 'org.datanucleus:datanucleus-core:5.1.5'
    compile 'org.datanucleus:datanucleus-enhancer:3.1.1'
    compile 'org.datanucleus:datanucleus-api-jdo:5.1.4'
    compile 'org.datanucleus:datanucleus-rdbms:5.1.5'
//    compile 'org.datanucleus:datanucleus-geospatial:5.1.1'
    compile 'org.datanucleus:datanucleus-accessplatform-jdo-rdbms:5.0.6'
    compile 'com.vividsolutions:jts:1.13'

    // Postgres JDBC driver
    compile 'org.postgresql:postgresql:42.2.2'

    // Spring ORM
    compile 'org.springframework:spring-orm:4.3.5.RELEASE'

    // Spring Boot
    compile 'org.springframework.boot:spring-boot-starter-web:2.0.4.RELEASE'

    // Google Guava
    compile 'com.google.guava:guava:26.0-jre'

    // Jackson databind
    compile 'com.fasterxml.jackson.core:jackson-databind:2.9.6'

    // Hikari connection pool
    compile 'com.zaxxer:HikariCP:2.6.1'

    // Liquibase core
    compile 'org.liquibase:liquibase-core:3.4.2'

    // Retrofit
    compile 'com.squareup.retrofit2:retrofit:2.4.0'
    compile 'com.squareup.retrofit2:converter-jackson:2.4.0'

    // BCrypt password encryption
    implementation 'at.favre.lib:bcrypt:0.5.0'

    // Logging
    compile group: 'ch.qos.logback', name: 'logback-classic', version: '1.2.3'
}

//
// Enhance model implementation classes with DataNucleus
//
classes.doLast {

    def entityFiles = fileTree(new File(buildDir, 'classes/java/main/com/appropel/schuss/model/impl'))
    entityFiles.exclude("Q*");

    println "Enhancing with DataNucleus the following files"
    entityFiles.getFiles().each {
        println it
    }

    // define Ant task for DataNucleus Enhancer
    ant.taskdef(
            name: 'datanucleusenhancer',
            classpath: sourceSets.main.compileClasspath.asPath,
            classname: 'org.datanucleus.enhancer.EnhancerTask'
    )

    // run the DataNucleus Enhancer as an Ant task
    ant.datanucleusenhancer(
            classpath: sourceSets.main.runtimeClasspath.asPath,
            dir: 'src/main/resources',
            destination: new File(buildDir, 'classes/java/main'),
            verbose: true,
            api: "JDO") {
        entityFiles.addToAntBuilder(ant, 'fileset', FileCollection.AntType.FileSet)
    }
}

//
// Define database connection
//

def dbHostLocal = ""
def dbPortLocal = ""
def dbUserLocal = ""
def dbPasswordLocal = ""
def dbNameLocal = ""

Properties localProperties = new Properties()
File localPropertiesFile = new File("${projectDir}/src/main/resources/local.properties")
if (localPropertiesFile.exists()) {
    localProperties.load(localPropertiesFile.newDataInputStream())
    dbHostLocal     = localProperties.getProperty('RDS_HOSTNAME')
    dbPortLocal     = localProperties.getProperty('RDS_PORT')
    dbUserLocal     = localProperties.getProperty('RDS_USERNAME')
    dbPasswordLocal = localProperties.getProperty('RDS_PASSWORD')
    dbNameLocal     = localProperties.getProperty('RDS_DB_NAME', "schuss")
}

ext {
    dbHost      = System.getenv("RDS_HOSTNAME") != null ? System.getenv("RDS_HOSTNAME") : dbHostLocal
    dbPort      = System.getenv("RDS_PORT")     != null ? System.getenv("RDS_PORT")     : dbPortLocal
    dbUser      = System.getenv("RDS_USERNAME") != null ? System.getenv("RDS_USERNAME") : dbUserLocal
    dbPassword  = System.getenv("RDS_PASSWORD") != null ? System.getenv("RDS_PASSWORD") : dbPasswordLocal
    dbName      = System.getenv("RDS_DB_NAME")  != null ? System.getenv("RDS_DB_NAME")  : dbNameLocal
    dbUrl       = 'jdbc:postgresql://' + dbHost + ':' + dbPort + '/' + dbName
}

println "DB URL: " + dbUrl

//
// Integrate Liquibase
//
liquibase {
    activities {
        main {
            changeLogFile "src/main/resources/database/changelog/db.changelog-master.xml"
            url dbUrl
            username dbUser
            password dbPassword
            changeLogParameters([ 'db.name': dbName])
        }
    }
}

//
// Run this task to get an output file of what DataNucleus thinks the schema looks like.
//
task datanucleusSchema(type: JavaExec) {
    dependsOn classes
    classpath sourceSets.main.runtimeClasspath
    systemProperties = [
            "datanucleus.ConnectionURL": dbUrl,
            "datanucleus.ConnectionUserName": dbUser,
            "datanucleus.ConnectionPassword": dbPassword
    ]
    main = "org.datanucleus.store.schema.SchemaTool"
    args "-create", "-ddlFile", "build/schema.sql", "-completeDdl",
            "-props", "src/main/resources/datanucleus.properties",
            "-pu", "schuss"

}

//
// Run this task to get an output of what DataNucleus thinks is incorrect in the schema.
//
task datanucleusValidate(type: JavaExec) {
    dependsOn classes
    classpath sourceSets.main.runtimeClasspath
    systemProperties = [
            "datanucleus.ConnectionURL": dbUrl,
            "datanucleus.ConnectionUserName": dbUser,
            "datanucleus.ConnectionPassword": dbPassword
    ]
    main = "org.datanucleus.store.schema.SchemaTool"
    args "-validate", "-props", "src/main/resources/datanucleus.properties",
            "-pu", "schuss"
}

//
// Build a jar of the remote service
//
configurations {
    remoteservice
}

task remoteServiceJar(type: Jar) {
    baseName = 'schuss-service'
    dependsOn classes
    from sourceSets.main.output
    include('com/appropel/schuss/service/**')
}

artifacts {
    remoteservice remoteServiceJar
}

//
// Code checks
//
checkstyle {
    configFile = new File(rootDir, "config/checkstyle.xml")
    toolVersion = "7.6"
}

// Workaround, see: https://github.com/gradle/gradle/issues/881
tasks.withType(Checkstyle).each { checkstyleTask ->
    checkstyleTask.doLast {
        reports.all { report ->
            def outputFile = report.destination
            if (outputFile.exists() && outputFile.text.contains("<error ")) {
                throw new GradleException("There were checkstyle warnings! For more info check $outputFile")
            }
        }
    }
}

pmd {
    ruleSetFiles = files(new File(rootDir, 'config/pmd.xml'))
}

findbugs {
    sourceSets = [sourceSets.main]
    reportsDir = file("$project.buildDir/findbugsReports")
    effort = "max"
    reportLevel = "high"
}

tasks.withType(FindBugs) {
    reports {
        xml.enabled project.hasProperty('findbugsXml')
        html.enabled !xml.isEnabled()
    }
}

classycleMain.definitionFilePath = 'config/classycle.txt'
classycleMain.outputs.dir('$buildDir/reports/classycle')

